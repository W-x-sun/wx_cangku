#version 400 core

layout(isolines) in;//配置图元生成器,isolines为跨单位正方形的一组线。域坐标：在[0, 1)范围的(u, v)坐标对。

out vec3 tangent_te;
out float tessx_te;
out float colorVariation_te;
// 变换反馈输出
//out vec3 WS_position;
//out vec3 WS_tangent;
//out float tessx;

const int MAX_VERTICES = 64; // 头发顶点的最大数量

// 将噪波noise应用于顶点位置的常数.
const int NOISE_OCTAVES = 3;

uniform mat4 model, view, projection;
uniform vec3 vertexData[MAX_VERTICES];
uniform int numHairSegments;
uniform int numSplineVertices;
uniform float hairGroupSpread;
uniform float noiseAmplitude;
uniform float noiseFrequency;
uniform vec3 triangleFace[2];
uniform float hairLength;
uniform sampler2D noiseTexture;

float rand( vec2 p )
{
    return fract(sin(dot(p,vec2(12.9898,78.233))) * 43758.5453);
    //1  dot（）用于矩阵的乘法运算
    //2  fract（）返回正数数值的小数部分，正确的定义为fract（x）=x-floor（x），而floor（x）的值为向下取整
    //所以对于负值而言：fract（-0.1）=（-0.1）-（-1）=0.9
}

//参数tessCoord三个分量，总在细分计算着色器中使用，代表与图元细分相关的被处理顶点的位置，gl_TessCoord的xyz值和为1，三个分量应该就是三个顶点分别占的比重
vec3 spline(float tessCoordX)
{
    // 0 -------- 1 -----X-- 2 -------- 3
    //              <--->
    //                t

    //clamp(x, min, max);当x大于max时，返回max， 当x小于min时，返回min，当x介于min和max之间时，返回x本身
    float f = clamp(tessCoordX, 0.0, 1.0) * numHairSegments;
    float t = fract(f);//取f的小数部分
    int index1 = int(f);//取f的整数
    int index0 = max(index1 - 1, 0);
    int index2 = min(index1 + 1, numHairSegments);
    int index3 = min(index2 + 1, numHairSegments);
    vec3 p0 = vertexData[index0];
    vec3 p1 = vertexData[index1];
    vec3 p2 = vertexData[index2];
    vec3 p3 = vertexData[index3];
    vec3 m1 = (p2 - p0) / 2.0;
    vec3 m2 = (p1 - p3) / 2.0;

    //mix(colorA, colorB, weight); 两种颜色混合渲染，weight为colorB的渲染权重，1-weight为colorA的渲染权重，应用于颜色混合叠加效果。
    return mix(p1 + m1 * t, p2 + m2 * (1-t), smoothstep(0.0, 1.0, t));
}
//变动样条。返回值为pos
vec3 shiftedSpline(in vec2 tessCoord)
{
    vec3 pos = spline(tessCoord.x);

    // Offset each hair uniformly in circle around guide hair.
    //在围绕头发的圆中均匀偏移每根头发
    float r = sqrt(rand(vec2(tessCoord.y)));
    float theta = 6.283 * rand(vec2(0.9 * tessCoord.y));
    pos += hairGroupSpread * r * cos(theta) * triangleFace[0];
    pos += hairGroupSpread * r * sin(theta) * triangleFace[1];

    // 对偏移位置应用噪波.
    float noise = noiseAmplitude * tessCoord.x;
    tessCoord *= vec2(noiseFrequency * (2 * hairLength), 0.2);
    pos.x += noise * (1.0 - 2.0 * texture(noiseTexture, tessCoord.xy).r) * 0.5;
    pos.y += noise * (1.0 - 2.0 * texture(noiseTexture, tessCoord.xy + .1).r) * 0.5;
    pos.z += noise * (1.0 - 2.0 * texture(noiseTexture, tessCoord.xy + .2).r) * 0.5;

    return pos;
}
void main()
{
    vec3 pos = shiftedSpline(gl_TessCoord.xy);
    vec3 prevPos = shiftedSpline(vec2(gl_TessCoord.x - 1.0 / (numSplineVertices - 1), gl_TessCoord.y));
    vec3 nextPos = shiftedSpline(vec2(gl_TessCoord.x + 1.0 / (numSplineVertices - 1), gl_TessCoord.y));
    tangent_te = (view * model * vec4(nextPos - prevPos, 0.)).xyz;
    tessx_te = gl_TessCoord.x;
    colorVariation_te = texture(noiseTexture, triangleFace[0].xy*gl_TessCoord.yy).r;
    gl_Position = view * model * vec4(pos, 1);//最后的输出位置

// Setting variables for transform feedback
//    WS_position = (model * vec4(pos, 1.)).xyz;
//    WS_tangent = (model * vec4(nextPos - prevPos, 0.)).xyz;
//    tessx = tessx_te;
}
